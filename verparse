#!/usr/bin/perl -w

# Copyright information contained at the end of the file

# Import Module
use Getopt::Long;
use Pod::Usage;
use IO::Socket;
use strict;

# Set global variables for 'use strict'

use vars qw ($Debug $socketDir $socketFile $socket $requestType $currentFile $recData
             $searchString $sentData $refreshServer $killServer $dumpNetlist);

# Set global variables
$Debug = 0;
$socketDir = $ENV{'VERPARSE_SOCKET'};
    # See if the $sockedDir environment variable has been set, if not, exit
    die "The VERPARSE_SOCKET environment variable isn't set! Exitting..." unless $socketDir;

$socketFile = "$socketDir/socket";

# Get command line options
if (! GetOptions (
          "help"     => \&usage,
          "debug"    => \&debug,
          "t=s"      => \$requestType,
          "f=s"      => \$currentFile,
          "s=s"      => \$searchString,
          "kill!"    => \$killServer,
          "refresh!" => \$refreshServer,
          "dump_netlist!" => \$dumpNetlist
    )) {
    die "%Error: Bad usage, try 'vnetsearch --help'\n";
}

# Setup up communication port
createSocket();

# Send input data to the server
if ($killServer) {
    $sentData = "kill=1";
} elsif ($refreshServer) {
    $sentData = "refresh=1";
} elsif ($dumpNetlist) {
    $sentData = "dump_netlist=1";
} elsif ($currentFile) {
    if ($requestType eq "up") {
        $sentData = "type=$requestType;file=$currentFile";
    } else {
        $sentData = "type=$requestType;search=$searchString;file=$currentFile";
    }
} else {
    $sentData = "type=$requestType;search=$searchString";
}

print "Data sent to verparse_server: $sentData\n" if $Debug;
print $socket "$sentData\n";

# Receive data from the server
chomp ($recData = <$socket>);
print "Data received from server   : $recData\n" if $Debug;
print $recData, "\n";

######################################################################

# Display POD

sub usage {
    pod2usage(-verbose=>2, -exitval=> 2);
    exit (1);
}

######################################################################

# Enable debug output

sub debug {
    $Debug = 1;
}

######################################################################

# Setup UNIX domain socket

sub createSocket {
    
    # Check and see if the UNIX domain socket file exists, if not, exit client
    if (-S $socketFile) {
        $socket = IO::Socket::UNIX->new(Peer => $socketFile,
                                        Type => SOCK_STREAM
                                       ) or die ( "Can't connect to server: $!\n");
        
    } else {
        print "No verparse_server running...\n\nExitting...\n";
        exit (1);
    }
}

######################################################################
######################################################################
######################################################################

__END__

=pod

=head1 NAME

verparse - Sends parsing requests to the running verparse_server

=head1 SYNOPSIS

  verparse --help
  verparse --refresh
  verparse --dump_netlist
  verparse --kill
  verparse [--debug] [-t request_type] [-s search_string] [-f file]

=head1 DESCRIPTION

verparse sends search requests to a running verparse_server and
receives data regarding which verilog file and line number from the
search result.

=head1 VERPARSE ARGUMENTS

=over 4

=item --help

Displays this message and exits

=item --debug

Displays useful debug information regarding sent and received data

=item --refresh

Forces the verparse_server to rebuild the Verilog::Netlist object. This should be
performed whenever a compile takes place or when verilog files are added/removed.

=item --dump_netlist

Dumps the entire netlist object into the terminal running the verparse_server.
The verparse_server instance must be run with the --debug option for the
object to be seen. This is usually quite large, as it contains all of a project's
modules, cells, nets, ports, defines, and signal assignments. Only use this if
you are tracking down a serious bug.

=item --kill

Sends and INT signal to the verparse_server, causing it to gracefully shutdown

=item -t I<request_type>

Determines which command should be sent to the server. Valid options are:
    * signal   --> performs a signal search and returns the file and line number
                   of the searched signal's declaration. There are 2 routines
                   available, depending on whether or not the -f option is passed
    * module   --> performs a module search and returns the file and line number
                   of the searched module's declaration
    * define   --> returns the value of the searched define's value
    * trace    --> performs a trace on the given signal. Returns all the file and
                   line number data regarding where the searched signal connects.
                   This feature is not yet implemented

=item -s I<search_string>

Determines the search string passed to the server. Only exact matches are valid.
Regular expressions are not supported at this time.

=item -f I<file>

Defines the starting file for a signal search or trace. This allows for a
faster and more accurate search routine to be utilized.

=back

=head1 DISTRIBUTION

Verilog-Perl is part of the L<http://www.veripool.org/> free Verilog EDA
software tool suite. The latest version is availabe from CPAN and from
L<http://www.veripool.org/verilog-perl>.

Copyright 2011 by Chuck McClish. This package is free software; you
can redistribute it and/or modify it under the terms of either the GNU
Lesser General Public License Version 3 or the Perl Artistic License Version 2.0.

=head1 AUTHOR

Chuck McClish <charles.mcclish@microchip.com>

=head1 SEE ALSO

L<Verilog-Perl>,
L<Verilog::Getopt>,
L<Verilog::Netlist>,
L<IO::Socket>

=cut
######################################################################
