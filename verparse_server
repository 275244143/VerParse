#!/usr/bin/perl -w

# Copyright information contained at the end of the file

# Import Modules
use POSIX qw(setsid);
use Getopt::Long;
use Pod::Usage;
use Verilog::Netlist;
use Verilog::Getopt;
use Verilog::Preproc;
use IO::Socket;
use strict;

# Set global variables for 'use strict'
use vars qw ( $Debug $socketFile $socketDir $socket $opt
              $nl $pp $com $recData %recDataHash $sendData
              @inputArgs @moduleList $nonDaemon $logFile
);

# Set global variables
$nonDaemon = 0;
$Debug = 0;
%recDataHash = ();
@inputArgs = @ARGV;
$socketDir = $ENV{'VERPARSE_SOCKET'};
$logFile   = "$socketDir/verparse_server.log";

# Display help if it the option is called
$opt = new Verilog::Getopt();
@ARGV = $opt->parameter(@inputArgs);
GetOptions ("help"      => \&usage,
            "debug"     => \&debug,
            "log=s"     => \$logFile,
            "no_daemon" => \&noDaemon
           );

# See if the $sockedDir environment variable has been set, if not, exit
die "ERROR: The VERPARSE_SOCKET environment variable isn't set! Exitting..." unless $socketDir;

$socketFile = "$socketDir/socket";

# Prevent an INT signal (CTRL-C) from killing the program without removing the socket file
#foreach my $signal (keys %SIG) {
#    $SIG{$signal} = \&interrupt_handler;
#}
$SIG{INT} = \&interrupt_handler;

# Setup communication port
createSocket();

# Daemonize the process
unless ($nonDaemon) {
    daemonize();
}

print "Using UNIX domain socket $socketFile\n";

# Build the Verilog::Netlist object
buildNetlist();

# Main program loop
# Wait for and process requests from the client
while (1) {

    # Accept incoming connections
    $com = $socket->accept() or die("Can't accept connection: $!\n");

    # Wait until a newline character is received to process the data
    chomp ( $recData = <$com> );

    # Decipher $recData and issue commands
    print qq{\n******************************\nClient has sent command: "$recData"\n} if $Debug;

    # Split data into a hash to find commands easily
    %recDataHash = split(/[=;]/, $recData);

    # Send INT signal if kill requested
    if (exists $recDataHash{kill}) {
        print $com "Server killed, INT signal received from client\n";
        interrupt_handler();
    }

    # Reload netlist if refresh requested
    if (exists $recDataHash{refresh}) {
        buildNetlist();
        print "Netlist object refreshed on verparse_server\n" if $Debug;
        print $com "Netlist object refreshed on verparse_server\n";
        # Clear the data hash and return to top of while loop
        %recDataHash = ();
        next;
    }

    # Dump the netlist object for debugging
    if (exists $recDataHash{dump_netlist}) {
        print "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n";
        print "%%               Dumping Netlist Object for Debugging             %%\n";
        print "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n";
        
        $nl->dump;

        print "\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n";
        print "%%                     Netlist Dump Complete                      %%\n";
        print "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n";
        print $com "Netlist object dumped on verparse_server. Run server in debug mode to view\n";
        next;
    }

    # Pass client data on to parsing subroutines and return result
    my @returnData;
    my @inputData;

    my $searchString = $recDataHash{search};
    my $fileString   = $recDataHash{file};

    $inputData[0] = $searchString;
    $inputData[1] = $fileString if exists $recDataHash{file};

    # Search for define value
    @returnData = defineValue(@inputData) if $recDataHash{type} eq "define";

    # Search for the declaration of a net or register
    @returnData =  findSignal(@inputData) if $recDataHash{type} eq "signal";

    # Search for a module declaration
    @returnData =  findModule(@inputData) if $recDataHash{type} eq "module";

    # Trace the load of a net or register
    @returnData =  traceLoads(@inputData) if $recDataHash{type} eq "trace";

    # Go up one level of hierarchy
    @returnData =  upLevel($fileString)   if $recDataHash{type} eq "up";

    # Return the module list
    @returnData = returnModuleList()      if $recDataHash{type} eq "module_list";

    # Send data to client
    $sendData = join(' ', @returnData);
    print "Server returned data: $sendData\n" if $Debug;
    print $com "$sendData\n";

    # Clear hash to process next client request
    %recDataHash = ();
    $nl->link();
}

######################################################################

# Interrupt handler

sub interrupt_handler {
    print "\nClosing verparse_server socket in $socketFile\n\nExitting...\n";
    $socket->close();
    unlink $socketFile;
    $nl->delete;
    exit(1);
}

######################################################################

# Run verparse_server as a daemon

sub daemonize {
    chdir './' or die "Can't chdir to ./: $!";
    umask 0;
    open STDIN, '/dev/null' or die "Can't write to /dev/null: $!";
    open STDOUT,  ">$logFile" or die "Can't write to $logFile: $!";
    open STDERR, ">>$logFile" or die "Can't write to $logFile: $!";
    defined(my $pid = fork)   or die "Can't fork: $!";
    exit if $pid;
    setsid                    or die "Can't start a new session: $!";
}

######################################################################

# Display POD

sub usage {
    pod2usage(-verbose=>2, -exitval=> 2);
    exit (1);
}

######################################################################

# Enable debug output

sub debug {
    $Debug = 1;
}

######################################################################

# Disable running in a daemon. Run in current terminal window

sub noDaemon {
    $nonDaemon = 1;
}

######################################################################

# Setup UNIX domain socket

sub createSocket {
    
    # Check and see if the UNIX domain socket file exists, if not, create one
    if (-S $socketFile){
        print "Server already running. Please delete $socketFile and kill the running server.
Execute the command 'ps ax | grep verparse_server' to see running verparse_servers\n";
        exit(1);
    }

    $socket = IO::Socket::UNIX->new(Local     => $socketFile,
                                    Type      => SOCK_STREAM,
                                    Listen    => SOMAXCONN
                                   ) or die ( "Can't create server socket: $!\n");
}

######################################################################

# Build the Verilog::Netlist object and setup the preprocessor

sub buildNetlist {
    # Delete an existing netlist object before a refresh
    $nl->delete if $nl;

    # Get command line options
    $opt = new Verilog::Getopt();
    @ARGV = $opt->parameter(@inputArgs);

    if (! GetOptions (
              "debug"     => \&debug,
              "no_daemon" => \&noDaemon,
              "log=s"     => \$logFile,
              "<>"        => \&parameter,
        )) {
        die "ERROR: Bad usage, try 'verparse_server --help'\n";
    }

    # Create new netlist object
    $nl = new Verilog::Netlist (options => $opt,
                                keep_comments => 0,
                                use_vars => 1,
                                implicit_wires_ok => 1,
                                link_read  => 1,
                                #link_read_nonfatal => 1, # Comment this out when all project *.f files are formatted correctly
                                include_open_nonfatal => 1
                               );

    # Read in all modules
    $nl->read_libraries();

    # Read the files in the project and create full netlist tree
    print "\nRead in the following project files:\n\n" if $Debug;
    for my $fileHash ($nl->files) {
        my $fileName = $fileHash->name;
        print "$fileName\n" if $Debug;
        $nl->read_file ( filename => $fileName );
    }

    $nl->link();
    #$nl->lint();  #This checks for lint warnings on pins. slows it down, may implement later
    $nl->exit_if_error();

    #print $nl->verilog_text if $Debug; #Print out the verilog code representing the netlist. Could be useful in a major debug

    # Get all top modules
    @moduleList = ();
    for my $module ($nl->top_modules_sorted) {
        my $topLevel = $module->level;
        $topLevel = 1;
        my $moduleName = $module->name . ' 0';
        my $depthMarker = '*';

        my @moduleData = ($depthMarker, $moduleName);

        # Get each subcell of each top module
        my @cellData = descend_hier($module, $topLevel);
        if (@cellData) {
            push(@moduleList, @moduleData);
            push(@moduleList, @cellData);
        }
    }
}

sub descend_hier {
    my $module = $_[0];
    my $topLevel = $_[1];
    my $cellLevel = $topLevel + 1;
    my @returnData;
    my @moduleData;
    my @cellData;

    for my $cell ($module->cells_sorted) {
        my $moduleName = $cell->submodname . ' (' . $cell->name . ') 0';
        if ($cell->submod) {
            my $level = $cell->submod->level;

            my $depthMarker = ('  ' x $topLevel).'|-*';

            @moduleData = ($depthMarker, $moduleName);
            push(@returnData, @moduleData);

            @cellData = descend_hier($cell->submod, $cellLevel);
            push(@returnData, @cellData);
        }
    }

    return @returnData;
}

######################################################################

# Find the root definition of a net or register

sub findSignal {
    # Pull in arguments
    my $search   = $_[0];
    my $filename = $_[1];

    # Setup parsing regular expression. Searches for the following lines in a file:
    #
    # assign netName = ******
    # assign netName[1:0] = ******
    # assign {******netName[1:0]******} =
    #   regName <= ******
    #   regName = ******
    #   regName[1:0] <= ******
    #   regName[1:0] = ******
    #   {******regname******} = ******
    #   if (******) regname <= ******
    # 
    # Regular expression: /^\s?((assign\s$netName[\s\[\=\{])|(.*\([\w\s:]+\)[^<=]*$netName)|([\{]?$netName[\s\[\,\<\=].*[\&\|;])|(\{.*\,\s?$netName[\s\[\}\,]))/

    # Search each module for the requested signal
    print "Net search command issued:\n" if $Debug;

    # If a filename is given, search the given filename first, then parse connected modules for the signal declaration
    if ($filename) {
        # From the filename given, determine the current module (this only works if the basename of the file matches the module name
        # e.g. filename is "module_1.v" and the module is called "module_1")
        my $fileref = $nl->read_file( filename => $filename );
        my $moduleName  = $fileref->basename;

        print "Starting Module: $moduleName\n" if $Debug;

        # This is needed to get all of the cell interconnect information
        $nl->link();

        if ($moduleName) {
            my $module = $nl->find_module($moduleName);
            my $lastModule = $module->name;
            my $lastSearch = $search;
            my $port = '';

            # Iterate through connected modules until the signal declaration is found
            my $foundSignal = 0;
            while (1) {
                # Check to see if the net is a port to the module
                if ($module->find_port($search)) {
                    $port = $module->find_port($search);
                } else {
                    $port = '';
                }

                #print "Port name: ", $port->name, "\n" if $Debug;

                # If the port does not exist or is an output the declaration must be in the local module or leaf cell
                if ($port eq '' || $port->direction eq "out") {
                    $foundSignal = 0;
                    print "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n" if $Debug;
                    print "%%%%%      Found Output Port or No Port     %%%%%\n" if $Debug;
                    print "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n" if $Debug;

                    # Check leaf cells and see if this signal is an output
                  NONE_OUTPUT_LOOP: for my $leafCell ($module->cells) {
                      print "*********************************************************\n" if $Debug;
                      print "*********************************************************\n" if $Debug;
                      $leafCell->dump if $Debug;
                      print "*********************************************************\n" if $Debug;
                      print "*********************************************************\n" if $Debug;

                      unless ( $leafCell->submodname eq $lastModule ) {
                          for my $leafPin ($leafCell->pins) {
                              #print "Cell Pin Name: ", $leafPin->name, "\n" if $Debug;
                              my $leafNet = $leafPin->net;
                              my $leafPort = $leafPin->port;

                              print "Cell Pin Name       : ", $leafPin->name, "\n" if $Debug;
                              print "Cell Net Name       : ", $leafNet->name, "\n" if ($Debug && $leafNet);

                              # Only need ports that are outputs
                              if ($leafPort) {
                                  if ($leafPort->direction eq "out") {
                                      if ($leafNet) {
                                          print "Cell Net Name       : ", $leafNet->name, "\n" if $Debug;
                                          if ($leafNet->name eq $search) {
                                              $lastModule = $module->name;
                                              $lastSearch = $search;
                                              $module = $leafCell->submod;
                                              $search = $leafPin->name;
                                              print "\nSignal Found!\n" if $Debug;
                                              print "Last Search Pattern : $lastSearch\n" if $Debug;
                                              print "Next Search Pattern : $search\n" if $Debug;
                                              print "Last Module Name    : $lastModule\n" if $Debug;
                                              print "Up-Module Name      : ", $module->name, "\n\n" if $Debug;
                                              $foundSignal = 1;
                                              last NONE_OUTPUT_LOOP;
                                          }
                                      } else {
                                          print "Cell output is not connected or is a bus\n" if $Debug;
                                      }
                                  }
                              }
                          }
                      }
                  }

                    unless ($foundSignal) {
                        my @returnData;
                        @returnData = parseModuleForNet($search, $module, $lastSearch);
                        if ($returnData[0]) {
                            return @returnData;
                        } else {
                            # If subroutine gets to this point, the net was not found
                            print "Searched signal not found\n" if $Debug;
                            return;
                        }
                    }

                } elsif ($port->direction eq "in") {
                    # Parse through the other modules and find which instantiate this module
                    $foundSignal = 0;
                    my @moduleArray;
                    my @cellArray;
                    my $inc = 0;
                    my $cell = '';
                    my $upModule = '';
                    for my $upModule ($nl->modules) {
                        for my $cell ($upModule->cells) {
                            if ($cell->submodname eq $module->name) {
                                $moduleArray[$inc] = $upModule;
                                $cellArray[$inc]   = $cell;
                            }
                        }
                    }
                    
                    # Find the array size
                    my $size = @cellArray;
                    $cell = $cellArray[0];
                    $upModule = $moduleArray[0];

                    # If only one module instantiates this cell, go into that module and search again
                    if ( $size == 1 ) {
                        print "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n" if $Debug;
                        print "%%%%% Found input declaration for search pattern %%%%%\n" if $Debug;
                        print "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n" if $Debug;
                        print "*********************************************************\n" if $Debug;
                        print "*********************************************************\n" if $Debug;
                        $cell->dump if $Debug;
                        print "*********************************************************\n" if $Debug;
                        print "*********************************************************\n" if $Debug;

                        #Check all of the pins in this cell
                        for my $pin ($cell->pins) {
                            print "Cell Pin Name       : ", $pin->name, "\n" if $Debug;
                            my $pinNet = $pin->net;
                            
                            if ($pin) {
                                print "Cell Net Name       : ", $pin->netname, "\n" if $Debug;
                                
                                # If the net connected to the pin matches the search pattern, go up to that module and search for the connected net name
                                #FIXME: need to edit this, if 1'b0, 1'b1, or empty, need to stop there
                                if ($pin->name eq $search) {
                                    # Save last search value
                                    $lastSearch = $search;

                                    # Set the new $search value to this net's pin name
                                    $search = $pin->netname;

                                    # Set the lastModule in order to prevent parsing loop
                                    $lastModule = $module->name;

                                    # Set the new module to parse, the module that instantiates the current module
                                    $module = '';
                                    $module = $upModule;

                                    print "\nSignal Found!\n" if $Debug;
                                    print "Last Search Pattern : $lastSearch\n" if $Debug;
                                    print "Next Search Pattern : $search\n" if $Debug;
                                    print "Last Module Name    : ", $lastModule, "\n" if $Debug;
                                    print "Up-Module Name      : ", $module->name, "\n\n" if $Debug;
                                    $foundSignal = 1;
                                    last;
                                }

                                #FIXME: if pin is a bus, there needs to be another way to parse this
                            } else {
                                print "Cell Pin is not connected or is a bus\n" if $Debug;
                            }
                        }

                    # FIXME: If several modules instantiate this cell, return all instantiating modules files' and the line number where the search stopped
                    } elsif ( $size > 1 ) {
                        # If subroutine gets to this point, the net was not found
                        print "Searched signal not found. Multiple instantiations.\n" if $Debug;
                        return;
                    } else {
                        # If subroutine gets to this point, the net was not found
                        print "Searched signal not found\n" if $Debug;
                        return;
                    }

                    # If the port is an inout, exit for now. Need to fix this in the future
                } elsif ($port->direction eq "inout") {
                    # If subroutine gets to this point, the net was not found
                    print "Searched signal not found\n" if $Debug;
                    return;
                }
            }
        }
    } else {

        # If no filename is given, go through every module and search for the signal declaration (can be very slow depending on project size
        # and does not detect signal renames across module boundaries)
        #print "\nLoaded Modules with containing nets:\n\n" if $Debug;
        for my $module ($nl->modules) {
            #print $module->name, "\n" if $Debug; #Print all loaded modules
            my $foundNet = $module->find_net ($search);
            if ($foundNet) {
                my @returnData;
                @returnData = parseModuleForNet($search, $module);
                if ($returnData[0]) {
                    return @returnData;
                }
            }
        }
    }

    # If subroutine gets to this point, the net was not found
    print "Searched signal not found\n" if $Debug;
    return;
}

sub parseModuleForNet {
    # Pass parameters
    my $netName = $_[0];
    my $module  = $_[1];
    my $lastSearch = $_[2];
    $pp = Verilog::Preproc->new(keep_comments         => 0, # Remove all comments
                                keep_whitespace       => 0, # Convert all whitespace to either a newline or single space
                                include_open_nonfatal => 1, # Ignore any include files that do not exist
                                options             => $opt # Pass all verilog options in order to resolve filenames and defines
                               );

    if ($netName) {
        $pp->open(filename => $nl->resolve_filename($module->name));
        while (defined ( my $line = $pp->getline())) {
            if ( $line =~ /^\s?((assign((\s$netName(?!\w))|(\s?\{[^<=]*(?<!\w)$netName(?!\w)[^<=]*\}))[\s\[\=])|(.*\([\w\s:]+\)[^<=]*(?<!\w)$netName(?!\w))|([\{]?(?<!\w)$netName(?!\w)[\s\[\,\<\=].*[\&\|;])|(\{.*\,\s?$netName(?!\w)[\s\[\}\,]))/ ) {
                print "Found definition of $netName in file ", $nl->resolve_filename($module->name), " on line ", $pp->lineno(), "\n" if $Debug;
                my $returnFile = $nl->resolve_filename($module->name);
                my $returnLine = $pp->lineno();
                my @returnData = ($returnFile, $returnLine, $netName);
                return @returnData;
            }
        }
    }

    # search for the pin rename. The above fails when the pin is dynamically changed in the instantiation or when the pin is floating.
    # Example: .reset (~n_reset)  or  .testbus ({test0, test1, test2})  or  .floating_pin  (  )
    # This search will take longer because of this extra step, but, in my opinion, these examples are bad practice.
    # If you want to logically change an input pin, make an assign statement.
    $pp->open(filename => $nl->resolve_filename($module->name));

    # If the $netName input is a bus, input spaces into the name so that it will be parsed with the regex
    if ($netName =~ /\{.*\}/) {
        $netName =~ s/([,}{:\[\]])/\\s\?\\$1\\s\?/g;
        $netName =~ s/\\s\?\\s\?/\\s\?/g;
    }

    while (defined ( my $line = $pp->getline())) {
        if ( $line =~ /^\s?\.\s?$lastSearch\s?\(\s?$netName\s?\)\s?,?/ ) {
            print "Found definition of $netName in file ", $nl->resolve_filename($module->name), " on line ", $pp->lineno(), "\n" if $Debug;
            my $returnFile = $nl->resolve_filename($module->name);
            my $returnLine = $pp->lineno();
            my @returnData = ($returnFile, $returnLine);
            return @returnData;
        }
    }
}

######################################################################

# Find the root definition of a module

sub findModule {
    # Pull in arguments
    my $search   = $_[0];

    print "Module declaration search command issued:\n" if $Debug;

    #Parse the Verilog::Netlist object for the file and line number of the module declaration
    my $foundModule = $nl->find_module($search);
    if ($foundModule) {
        print "Module name: ", $foundModule->name, "\n" if $Debug;
        my $returnFile  = $nl->resolve_filename($foundModule->name);
        if ($returnFile) {
            print "Found file : $returnFile\n" if $Debug;

            $pp = Verilog::Preproc->new(keep_comments         => 0, # Remove all comments
                                        keep_whitespace       => 0, # Convert all whitespace to either a newline or single space
                                        include_open_nonfatal => 1, # Ignore any include files that do not exist
                                        options             => $opt # Pass all verilog options in order to resolve filenames and defines
                );

            $pp->open(filename => $returnFile);
            while (defined ( my $line = $pp->getline())) {
                if ( $line =~ /^\s?module\s$search[\s\(\n]/ ) {
                    my $returnLine = $pp->lineno();
                    print "Found declaration of $search in file $returnFile on line $returnLine\n" if $Debug;
                    return ($returnFile, $returnLine);
                }
            }
        }
    }

    # If subroutine gets to this point, the net was not found
    print "Module not found\n" if $Debug;
    return;

}

######################################################################

# Find and return the value of a define

sub defineValue {
    # Pull in arguments
    my $search   = $_[0];

    print "Display define value command issued:\n" if $Debug;

    #Parse the Verilog::Netlist object for the define value
    my $foundDefine = $nl->defvalue_nowarn($search);

    return $foundDefine if $foundDefine;

    # If subroutine gets to this point, the define was not found
    return;

}

######################################################################

# Trace the loads of the given signal

sub traceLoads {

    #FIXME: not yet implemented
    return;
}

######################################################################

# Go up one level of hierarchy

sub upLevel {
    # Pull in arguments
    my $filename = $_[0];

    print "Go up one level of hierarchy command issued:\n" if $Debug;

    # Get the module name from the given filename
    my $fileref = $nl->read_file( filename => $filename );
    my $moduleName  = $fileref->basename;
    my $module = $nl->find_module($moduleName);

    my @moduleArray;
    my @cellArray;
    my $cell = '';    
    my $inc = 0;
    for my $upModule ($nl->modules) {
        for my $upCell ($upModule->cells) {
            if ($upCell->submodname eq $module->name) {
                $moduleArray[$inc] = $upModule;
                $cellArray[$inc]   = $upCell;
            }
        }
    }
    
    # Find the array size
    my $size = @moduleArray;
    $module = $moduleArray[0];
    $cell = $cellArray[0];

    # If only one instantiation found, go up one level
    if ( $size == 1 ) {
        # Get the file path of this module and parse it for the line number of the module instantiation
        my $returnFile = $nl->resolve_filename($module->name);
        my $cellName = $cell->submodname;
        
        $pp = Verilog::Preproc->new(keep_comments         => 0, # Remove all comments
                                    keep_whitespace       => 0, # Convert all whitespace to either a newline or single space
                                    include_open_nonfatal => 1, # Ignore any include files that do not exist
                                    options             => $opt # Pass all verilog options in order to resolve filenames and defines
            );

        $pp->open(filename => $returnFile);
        while (defined ( my $line = $pp->getline())) {
            if ( $line =~ /^\s?$cellName[\s\#\n]/ ) {
                my $returnLine = $pp->lineno();
                print "Found declaration of $cellName in file $returnFile on line $returnLine\n" if $Debug;
                return ($returnFile, $returnLine);
            }
        }

    # FIXME: Need to return all of the files and instantiation points if the current module
    #        is instantiated in multiple places
    } elsif ( $size > 1 ) {

    }

    # If subroutine gets to this point, this is the top level cell
    print "The current module is a top module cell\n" if $Debug;
    return;
}

######################################################################

# Return a list of all the module names along with the file and line
# number in which they are instantiated. For speed, this list is built every
# time the verparse_server is refreshed or when it is started.
# See the buildNetlist subroutine to see how the @moduleList array is built.

sub returnModuleList {

    print "Return module list command issued:\n" if $Debug;

    return @moduleList;
}

######################################################################
######################################################################
######################################################################

__END__

=pod

=head1 NAME

verparse_server - Setup a server to be used in connection with the
client program (see L<verparse>)

=head1 SYNOPSIS

  verparse_server --help
  verparse_server [verilog_options] [--debug]

=head1 DESCRIPTION

verparse_server uses the Verilog::Netlist perl module to build a netlist of the project.
It also sets up a UNIX domain socket in order to process search requests from the client
program L<verparse>. See the verparse manpage for a description of commands.

=head1 SETUP

There are several steps to setup verparse_server. First, make sure the script is in your PATH.
Second, set the VERPARSE_SOCKET environment variable to point to a writable directory that
will contain the Unix domain socket and verparse_server.log file. Then run verparse_server
with all of the files to be utilized in the project.

For a detailed setup example, clone the project from the hosting git repository located here:

L<http://github.com/zettawatt/VerParse.git>

   git clone http://github.com/zettawatt/VerParse.git

Note: you must have a git version greater than 1.7 for this to work. Otherwise go to github
and search for 'verparse' which will take you to the page. From there you can download a zip
of the project.

After you clone the repo, add the VerParse directory to your PATH. Then set the VERPARSE_SOCKET
environment variable to the VerParse directory. Now you are ready to run verparse_server:

   verparse_server -f verilog/files.f --debug --no_daemon

Now verparse_server is running in the current terminal window. The '--no_daemon option prevents
verparse_server from running as a daemon so you can see the output. The '--debug' option will
display a verbose message of what the server is doing when you send requests from Emacs. You will
see a Unix domain socket as a file called 'socket=' in the VerParse directory.

Now that verparse_server is running setup Emacs to use the verparse.el lisp file. Put this in your
.emacs file:

   (load-library "/path/to/VerParse/verparse.el")

Note: This has only been tested on Emacs version 23.2 and above, older versions may not work.
Also, note that Emacs verilog-mode must be running before verparse.el because it piggybacks
on this major mode's functions and menus.

Now open the verilog/top.v file in Emacs. If all went well, you will be able to type the key
sequence 'C-c C-w' to toggle a graphical representation of your project's hierarchy. If you notice,
there is a verilog menu in the toolbar with a verparse submenu. All of the commands available are
in that list.

=head1 VERILOG ARGUMENTS

The following arguments are compatible with GCC, VCS and most Verilog
programs.

=over 4

=item +define+I<var>+I<value>
=item -DI<var>=I<value>

Defines the given preprocessor symbol.

=item -f I<file>

Read the specified file, and act as if all text inside it was
specified as command line parameters.

=item +incdir+I<dir>
=item -II<dir>

Add the directory to the list of directories that should be searched
for include directories or libraries.

=item +libext+I<ext>+I<ext>...

Specify the extensions that should be used for finding modules.  If for
example module I<x> is referenced, look in I<x>.I<ext>.

=item -sv

Specifies SystemVerilog language features should be enabled; equivalent to
"--language 1800-2005".  This option is selected by default, it exists for
compatibility with other simulators.

=item -y I<dir>

Add the directory to the list of directories that should be searched
for include directories or libraries.

=back

=head1 VERPARSE_SERVER ARGUMENTS

=over 4

=item --help

Displays this message and exits

=item --debug

Displays useful debug information about server processes

=item --no_daemon

This allows the verparse_server to run in the current terminal window. This is
very useful when in debug mode to see problems as they occur. It also is not always
convenient to run verparse_server as a daemon.

=item --log path/to/logFile

When running as a daemon, this specifies where to write the log file. This will contain
all output from the verparse_server. Without this option, the default will be to
create a file called verparse_server.log in the directory where the socket exists.

=back

=head1 DISTRIBUTION

Verilog-Perl is part of the L<http://www.veripool.org/> free Verilog EDA
software tool suite. The latest version is availabe from CPAN and from
L<http://www.veripool.org/verilog-perl>.

Copyright 2011 by Chuck McClish. This package is free software; you
can redistribute it and/or modify it under the terms of either the GNU
Lesser General Public License Version 3 or the Perl Artistic License Version 2.0.

=head1 AUTHOR

Chuck McClish <charles.mcclish@microchip.com>

=head1 SEE ALSO

L<Verilog-Perl>,
L<Verilog::Getopt>,
L<Verilog::Netlist>,
L<IO::Socket>

=cut
######################################################################
